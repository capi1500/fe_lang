fn main() -> i32 {
    var a1 = 1;
    var a2 = 1;
    var b1 = &mut a1; // has mutable reference to a1
    var b2 = &mut a2; // has mutable reference to a2
    var c = if (true) { &mut b1 } else { &mut b2 }; // has mutable reference to b1 and b2
    var d = *c; // (*c) should move out, but fail because c is a reference
    *d
    // but following
    //var d = **c; // should be ok
    //d
}

/*
error[E0507]: cannot move out of `*c` which is behind a mutable reference
  --> test.rs:93:14
   |
93 |     let mut d = *c;
   |                 ^^
   |                 |
   |                 move occurs because `*c` has type `&mut i32`, which does not implement the `Copy` trait
   |                 help: consider borrowing here: `&*c`
   */
   